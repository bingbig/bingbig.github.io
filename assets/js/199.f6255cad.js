(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{291:function(_,v,t){"use strict";t.r(v);var s=t(0),e=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"php编程技巧与优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#php编程技巧与优化","aria-hidden":"true"}},[_._v("#")]),_._v(" PHP编程技巧与优化")]),_._v(" "),t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[_._v("TIP")]),_._v(" "),t("p",[_._v("[来源：未知] 侵权请联系，删。")])]),_._v(" "),t("p",[_._v("PHP语言以其简单易学而闻名，但一些初学者经常会写出一些性能低下的PHP代码，这会严重影响整套系统的运行效率，本文我们为大家收集了一些PHP 编程技巧与优化，希望PHP初学者能认真阅读以下的编辑技巧，并养成良好的PHP编程习惯！")]),_._v(" "),t("ol",[t("li",[_._v("尽量采用大量的PHP内置函数。")]),_._v(" "),t("li",[_._v("使用 "),t("code",[_._v("echo")]),_._v(" 代替 "),t("code",[_._v("print")]),_._v("，并且使用 "),t("code",[_._v("echo")]),_._v(" 的多重参数（译注：指用逗号而不是句点）代替字符串连接，比如 "),t("code",[_._v("echo $str1,$str2")]),_._v(";")]),_._v(" "),t("li",[_._v("不要把方法细分得过多，仔细想想你真正打算重用的是哪些代码？")]),_._v(" "),t("li",[_._v("在执行"),t("code",[_._v("for")]),_._v("循环之前确定最大循环数，不要每循环一次都计算最大值。")]),_._v(" "),t("li",[_._v("注销那些不用的变量尤其是大数组，以便释放内存。")]),_._v(" "),t("li",[_._v("并非要用类实现所有的数据结构，数组也很有用。")]),_._v(" "),t("li",[t("code",[_._v("$row['id']")]),_._v("的效率是"),t("code",[_._v("$row[id]")]),_._v("的7倍。")]),_._v(" "),t("li",[_._v("在包含文件时使用完整路径，解析操作系统路径所需的时间会更少。")]),_._v(" "),t("li",[_._v("如果你想知道脚本开始执行（译注：即服务器端收到客户端请求）的时刻，使用 "),t("code",[_._v("$_SERVER['REQUEST_TIME']")]),_._v(" 要好于"),t("code",[_._v("time()")]),_._v("。")]),_._v(" "),t("li",[_._v("函数代替正则表达式完成相同功能，"),t("code",[_._v("str_replace")]),_._v("函数比"),t("code",[_._v("preg_replace")]),_._v(" 函数快，但 "),t("code",[_._v("strtr")]),_._v(" 函数的效率是"),t("code",[_._v("str_replace")]),_._v(" 函数的四倍。")]),_._v(" "),t("li",[_._v("注意代码编写的缩进。")]),_._v(" "),t("li",[_._v("如果一个字符串替换函数，可接受数组或字符作为参数，并且参数长度不太长，那么可以考虑额外写一段替换代码，使得每次传递参数是一个字符，而不是只写一行代码接受数组作为查询和替换的参数。")]),_._v(" "),t("li",[_._v("使用选择分支语句（译注：即"),t("code",[_._v("switch case")]),_._v("）好于使用多个"),t("code",[_._v("if")]),_._v("，"),t("code",[_._v("else if")]),_._v(" 语句。")]),_._v(" "),t("li",[_._v("用"),t("code",[_._v("@")]),_._v("屏蔽错误消息的做法非常低效。")]),_._v(" "),t("li",[_._v("打开Apache的mod_deflate模块。"),t("strong",[_._v("？？？")])]),_._v(" "),t("li",[_._v("数据库连接当使用完毕时应关掉。")]),_._v(" "),t("li",[_._v("错误消息代价昂贵。")]),_._v(" "),t("li",[_._v("尽量不要在for循环中使用函数，比如"),t("code",[_._v("for ($x=0; $x < count($array); $x)")]),_._v("每循环一次都会调用"),t("code",[_._v("count()")]),_._v("函数。")]),_._v(" "),t("li",[_._v("在方法中递增局部变量，速度是最快的。几乎与在函数中调用局部变量的速度相当。")]),_._v(" "),t("li",[_._v("递增一个全局变量要比递增一个局部变量慢2倍。")]),_._v(" "),t("li",[_._v("递增一个对象属性（如："),t("code",[_._v("$this->prop++")]),_._v("）要比递增一个局部变量慢3倍。")]),_._v(" "),t("li",[_._v("递增一个未预定义的局部变量要比递增一个预定义的局部变量慢9至10倍。")]),_._v(" "),t("li",[_._v("仅定义一个局部变量而没在函数中调用它，同样会减慢速度（其程度相当于递增一个局部变量），PHP大概会检查看是否存在全局变量")]),_._v(" "),t("li",[_._v("方法调用看来与类中定义的方法的数量无关，因为我（在测试方法之前和之后都）添加了10个方法，但性能上没有变化。")]),_._v(" "),t("li",[_._v("派生类中的方法运行起来要快于在基类中定义的同样的方法。")]),_._v(" "),t("li",[_._v("调用带有一个参数的空函数，其花费的时间相当于执行7至8次的局部变量递增操作。类似的方法调用所花费的时间接近于15次的局部变量递增操作。")]),_._v(" "),t("li",[_._v("用单引号代替双引号来包含字符串，这样做会更快一些。因为PHP会在双引号包围的字符串中搜寻变量，单引号则不会。当然，只有当你不需要在字符串中包含变量时才可以这么做。")]),_._v(" "),t("li",[_._v("Apache解析一个PHP脚本的时间要比解析一个静态HTML页面慢2至10倍。尽量多用静态HTML页面，少用脚本。")]),_._v(" "),t("li",[_._v("除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套PHP缓存机制通常可以提升25%至100%的性能，以免除编译开销。")]),_._v(" "),t("li",[_._v("尽量做缓存，可使用memcached。memcached是一款高性能的内存对象缓存系统，可用来加速动态Web应用程序，减轻数据库负载。对运算码(OP code)的缓存很有用，使得脚本不必为每个请求做重新编译。")]),_._v(" "),t("li",[_._v("当操作字符串并需要检验其长度是否满足某种要求时，你想当然地会使用"),t("code",[_._v("strlen()")]),_._v("函数。此函数执行起来相当快，因为它不做任何计算，只返回在zval 结构（C的内置数据结构，用于存储PHP变量）中存储的已知字符串长度。但是，由于"),t("code",[_._v("strlen()")]),_._v("是函数，多多少少会有些慢，因为函数调用会经过诸多步骤，如字母小写化。在某些情况下，你可以使用"),t("code",[_._v("isset()")]),_._v(" 技巧加速执行你的代码。")])]),_._v(" "),t("div",{staticClass:"language-php line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-php"}},[t("code",[t("span",{attrs:{class:"token keyword"}},[_._v("if")]),_._v(" "),t("span",{attrs:{class:"token punctuation"}},[_._v("(")]),t("span",{attrs:{class:"token function"}},[_._v("strlen")]),t("span",{attrs:{class:"token punctuation"}},[_._v("(")]),t("span",{attrs:{class:"token variable"}},[_._v("$foo")]),t("span",{attrs:{class:"token punctuation"}},[_._v(")")]),_._v(" "),t("span",{attrs:{class:"token operator"}},[_._v("<")]),_._v(" "),t("span",{attrs:{class:"token number"}},[_._v("5")]),t("span",{attrs:{class:"token punctuation"}},[_._v(")")]),_._v(" "),t("span",{attrs:{class:"token punctuation"}},[_._v("{")]),_._v(" \n\t"),t("span",{attrs:{class:"token keyword"}},[_._v("echo")]),_._v(" "),t("span",{attrs:{class:"token double-quoted-string string"}},[_._v('"Foo is too short"')]),t("span",{attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" \n"),t("span",{attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n"),t("span",{attrs:{class:"token keyword"}},[_._v("if")]),_._v(" "),t("span",{attrs:{class:"token punctuation"}},[_._v("(")]),t("span",{attrs:{class:"token operator"}},[_._v("!")]),t("span",{attrs:{class:"token function"}},[_._v("isset")]),t("span",{attrs:{class:"token punctuation"}},[_._v("(")]),t("span",{attrs:{class:"token variable"}},[_._v("$foo")]),t("span",{attrs:{class:"token punctuation"}},[_._v("{")]),t("span",{attrs:{class:"token number"}},[_._v("5")]),t("span",{attrs:{class:"token punctuation"}},[_._v("}")]),t("span",{attrs:{class:"token punctuation"}},[_._v(")")]),t("span",{attrs:{class:"token punctuation"}},[_._v(")")]),_._v(" "),t("span",{attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n\t"),t("span",{attrs:{class:"token keyword"}},[_._v("echo")]),_._v(" "),t("span",{attrs:{class:"token double-quoted-string string"}},[_._v('"Foo is too short"')]),t("span",{attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" \n"),t("span",{attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br")])]),t("ol",{attrs:{start:"32"}},[t("li",[_._v("如果能将类的方法定义成 "),t("code",[_._v("static")]),_._v("，就尽量定义成 "),t("code",[_._v("static")]),_._v("，它的速度会提升将近4倍。")]),_._v(" "),t("li",[_._v("不要使用"),t("code",[_._v("array_key_exists")]),_._v("，用"),t("code",[_._v("isset")]),_._v("来判断键值是否在数组中存在")]),_._v(" "),t("li",[_._v("避免使用"),t("code",[_._v("__set__")]),_._v("，"),t("code",[_._v("__get__")]),_._v("等魔术方法")]),_._v(" "),t("li",[_._v("使用 "),t("code",[_._v("include/require")]),_._v(" 代替 "),t("code",[_._v("include_once")]),_._v(" / "),t("code",[_._v("require_once")]),_._v("，且尽量使用绝对路径")]),_._v(" "),t("li",[_._v("不要把"),t("code",[_._v("count")]),_._v("/"),t("code",[_._v("strlen")]),_._v("/"),t("code",[_._v("sizeof")]),_._v("等放到"),t("code",[_._v("for")]),_._v("循环的条件语句中")]),_._v(" "),t("li",[_._v("尽量使用 "),t("code",[_._v("foreach")]),_._v(" 代替 "),t("code",[_._v("for")]),_._v("/"),t("code",[_._v("while")])]),_._v(" "),t("li",[_._v("读取小文件使用"),t("code",[_._v("fread")]),_._v("，读取大文件使用"),t("code",[_._v("file_get_contents")]),_._v("，特大的文件使用"),t("code",[_._v("fseek")])]),_._v(" "),t("li",[_._v("使用 "),t("code",[_._v("ip2long()")]),_._v(" 和 "),t("code",[_._v("long2ip()")]),_._v(" 函数来把 IP 地址转化成整型存储，可以使计算一个特定的地址是不是在一个区段内更简单，而且加快了搜索和排序的速度")]),_._v(" "),t("li",[_._v("在验证 email 地址时使用 "),t("code",[_._v("checkdnsrr()")]),_._v(" 函数验证域名是否存在，这个内置函数能够确认指定的域名能够解析成 IP 地址")]),_._v(" "),t("li",[_._v("考虑抛弃 "),t("code",[_._v("mysql_*")]),_._v(" 系列函数改用改进版的 "),t("code",[_._v("mysqli_*")]),_._v(" 系列函数")]),_._v(" "),t("li",[_._v("学会爱上三元运算符")]),_._v(" "),t("li",[_._v("用 "),t("code",[_._v("highlight_file()")]),_._v(" 来自动的打印出格式化的很漂亮的源代码")]),_._v(" "),t("li",[_._v("使用 "),t("code",[_._v("error_reporting(0)")]),_._v(" 函数来防止用户看到潜在的敏感错误信息。在理想情况下，发布服务器应该在 php.ini 里完全禁止。但是如果你用的是一个共享的 web 服务器的话，你没有自己的 php、ini 文件，那么这种情况下你最好的选择就是在所有脚本的第一行前加上 "),t("code",[_._v("error_reporting(0)")])]),_._v(" "),t("li",[_._v("在网数据库中存储很大的字符串之前使用 "),t("code",[_._v("gzcompress()")]),_._v(" 和 "),t("code",[_._v("gzuncompress()")]),_._v(" 来显式的压缩/解压字符串")]),_._v(" "),t("li",[_._v('通过"引用"传递参数的方法从一个函数中得到多个返回值')]),_._v(" "),t("li",[_._v('完全理解"魔术引号"和 SQL 注入的危险性，最简单的防止sql注入的方法：在php、ini中将'),t("code",[_._v("magic_quotes")]),_._v("设置为 "),t("code",[_._v("On")]),_._v(" ，使用 "),t("code",[_._v("mysql_real_escape_string()")]),_._v(" 函数转义")]),_._v(" "),t("li",[_._v("对global变量，应该用完就"),t("code",[_._v("unset()")]),_._v("掉；")]),_._v(" "),t("li",[_._v("不要相信用户提交的数据，一定使用 "),t("code",[_._v("htmlentities()")]),_._v("或 "),t("code",[_._v("htmlspecialchars()")]),_._v(" 先进行转义")]),_._v(" "),t("li",[_._v("当执行变量 "),t("code",[_._v("$i")]),_._v(" 的递增或递减时，"),t("code",[_._v("$i++")]),_._v(" 会比 "),t("code",[_._v("++$i")]),_._v(" 慢一些。这种差异是PHP特有的，并不适用于其他语言，所以请不要修改你的C或Java代码并指望它们能立即变快，没用的。"),t("code",[_._v("++$i")]),_._v(" 更快是因为它只需要3条指令(opcodes)，"),t("code",[_._v("$i++")]),_._v(" 则需要4条指令。后置递增实际上会产生一个临时变量，这个临时变量随后被递增。而前置递增直接在原值上递增")]),_._v(" "),t("li",[_._v("并不是事必面向对象(OOP)，面向对象往往开销很大，每个方法和对象调用都会消耗很多内存")]),_._v(" "),t("li",[_._v("如果在代码中存在大量耗时的函数，你可以考虑用C扩展的方式实现")]),_._v(" "),t("li",[_._v("评估检验(profile)你的代码。检验器会告诉你，代码的哪些部分消耗了多少时间。Xdebug调试器包含了检验程序，评估检验总体上可以显示出代码的瓶颈")]),_._v(" "),t("li",[t("code",[_._v("mod_zip")]),_._v(" 可作为Apache模块，用来即时压缩你的数据，并可让数据传输量降低80%")]),_._v(" "),t("li",[_._v("尽量的少进行文件操作，虽然PHP的文件操作效率也不低的")]),_._v(" "),t("li",[_._v("优化Select SQL语句，在可能的情况下尽量少的进行Insert、Update操作")]),_._v(" "),t("li",[_._v("循环内部不要声明变量，尤其是大变量：对象(这好像不只是PHP里面要注意的问题吧？)")]),_._v(" "),t("li",[_._v("多维数组尽量不要循环嵌套赋值")])])])}],!1,null,null,null);e.options.__file="tips.md";v.default=e.exports}}]);