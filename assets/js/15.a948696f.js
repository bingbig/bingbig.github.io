(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{171:function(s,a,t){s.exports=t.p+"assets/img/sql_execution.7320c78e.png"},357:function(s,a,t){"use strict";t.r(a);var n=[function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"_6-查询性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-查询性能优化","aria-hidden":"true"}},[s._v("#")]),s._v(" 6 查询性能优化")]),s._v(" "),n("p",[s._v("查询优化，索引优化，库表结构优化需要齐头并进。查询的生命周期大致可以按照顺序来看：从客户的，到服务器，然后在服务器上进行解析，生成执行计划，执行，并返回结果给客户端。")]),s._v(" "),n("p",[s._v("其中“执行”可以认为是整个生命周期中最重要的阶段，这其中包括了大量为了检索数据到存储引擎的调用以及调用后的数据处理，包括排序、分组等。")]),s._v(" "),n("h2",{attrs:{id:"_6-2-慢查询基础：优化数据访问"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-慢查询基础：优化数据访问","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.2 慢查询基础：优化数据访问")]),s._v(" "),n("ol",[n("li",[s._v("是否像数据库请求了不需要的数据")]),s._v(" "),n("li",[s._v("MySQL是否在扫描额外的记录。最简单的衡量查询开销的三个指标，"),n("strong",[s._v("响应时间")]),s._v("，"),n("strong",[s._v("扫描的行数和访问类型")]),s._v("和"),n("strong",[s._v("返回的行数")]),s._v("。如果发现查询需要扫描大量的数据但只返回少数的行，那么通常可以尝试下面的技巧去优化它：\n"),n("ul",[n("li",[s._v("使用索引覆盖扫描，把所有需要用的列都放到索引中")]),s._v(" "),n("li",[s._v("改变库表结构")]),s._v(" "),n("li",[s._v("重写这个复杂的查询")])])])]),s._v(" "),n("h2",{attrs:{id:"_6-3-重构查询的方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-重构查询的方式","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.3 重构查询的方式")]),s._v(" "),n("h3",{attrs:{id:"_6-3-2-切分查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-2-切分查询","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.3.2 切分查询")]),s._v(" "),n("p",[s._v("有时候对于一个大查询需要“分而治之”，将大查询切分成小查询。比如删除大量数据时，如果用一个大的语句一次性完成的话，则可能需要一次锁住很多的数据，占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。如：")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[s._v("DELETE")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" messages "),n("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" created "),n("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v(" DATE_SUB"),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token function"}},[s._v("NOW")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("INTERVAL")]),s._v(" "),n("span",{attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("MONTH")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("可以优化为：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('rows_affected = 0\ndo {\n    rows_affeced = do_query(\n        "DELETE FROM messages WHERE created < DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000"\n    )\n} while rows_affected > 0\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"_6-3-3-分解关联查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-3-分解关联查询","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.3.3 分解关联查询")]),s._v(" "),n("p",[s._v("例子：")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tag\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" tag_post "),n("span",{attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" tag_post"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tag_id "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" tag"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" post "),n("span",{attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" tag_post"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("post_id "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" post"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id\n"),n("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" tag"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tag "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v("'mysql'")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("可以分解为下面的查询语句：")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tag "),n("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" tag"),n("span",{attrs:{class:"token operator"}},[s._v("=")]),n("span",{attrs:{class:"token string"}},[s._v("'mysql'")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tag_post "),n("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" tag_id "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token number"}},[s._v("1234")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" post "),n("span",{attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" post_id "),n("span",{attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token number"}},[s._v("123")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{attrs:{class:"token number"}},[s._v("455")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{attrs:{class:"token number"}},[s._v("678")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{attrs:{class:"token number"}},[s._v("2344")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{attrs:{class:"token number"}},[s._v("5566")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("分解后的重构有如下优势：")]),s._v(" "),n("ul",[n("li",[s._v("让缓存的效率更高。应用程序可以方便的缓存单表的查询结果对象")]),s._v(" "),n("li",[s._v("执行单个查询可以减少锁的竞争")]),s._v(" "),n("li",[s._v("在应用层做关联，可以更容易对数据库进行拆分，更容易做到高性能和可扩展")]),s._v(" "),n("li",[s._v("查询本剩效率也可能会有所提升。用"),n("code",[s._v("IN()")]),s._v("代替关联查询，可以让MySQL按ID顺序查询，这可能比随机的关联查询更高效")]),s._v(" "),n("li",[s._v("可以减少冗余查询记录")]),s._v(" "),n("li",[s._v("在应用中实现了哈希关联，而不是使用MySQL的嵌套循环关联")])]),s._v(" "),n("h2",{attrs:{id:"_6-4-查询执行的基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-查询执行的基础","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.4 查询执行的基础")]),s._v(" "),n("p",[s._v("根据下图，可以看到向MySQL发送一个请求的时候，MySQL到底做了什么。")]),s._v(" "),n("p",[n("img",{attrs:{src:t(171),alt:"查询执行路径"}})]),s._v(" "),n("ol",[n("li",[s._v("客户端发送一条查询给服务器")]),s._v(" "),n("li",[s._v("服务器先检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段")]),s._v(" "),n("li",[s._v("服务器进行SQL解析，预处理，再由优化器生成对应的执行计划")]),s._v(" "),n("li",[s._v("MySQL根绝优化器生成的执行计划，调用存储引擎的API来执行查询")]),s._v(" "),n("li",[s._v("将结果返回给客户端")])]),s._v(" "),n("h3",{attrs:{id:"_6-4-1-mysql客户端-服务器通信协议"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-1-mysql客户端-服务器通信协议","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.4.1 MySQL客户端/服务器通信协议")]),s._v(" "),n("p",[s._v("MySQL客户端和服务器之间的通信协议是“半双工”的，这意味着，在任何一个时刻，要么是由服务器向客户端发送数据，要么是客户端向服务器发送数据，这两个动作不能同时发生。")]),s._v(" "),n("p",[s._v("客户端用"),n("strong",[s._v("一个单独的数据包")]),s._v("将查询传给服务器（最大的可以传输的包的大小为"),n("code",[s._v("max_allowed_packet")]),s._v("）。而服务器响应给用户的数据通常可以由多个数据包组成，客户端必须完整的接受整个返回结果。MySQL通常需要等所有的数据都已经发送给客户端才能释放这条查询所占用的资源，所以接受全部结果并缓存通常可以减少服务器的压力。让查询早点结束，释放响应的资源。")]),s._v(" "),n("p",[n("strong",[s._v("查询状态")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("mysql> SHOW FULL PROCESSLIST;\n+----+------+-----------+------+---------+------+----------+-----------------------+\n| Id | User | Host      | db   | Command | Time | State    | Info                  |\n+----+------+-----------+------+---------+------+----------+-----------------------+\n|  3 | root | localhost | NULL | Query   |    0 | starting | SHOW FULL PROCESSLIST |\n+----+------+-----------+------+---------+------+----------+-----------------------+\n1 row in set (0.00 sec)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"_6-4-2-查询缓存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-2-查询缓存","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.4.2 查询缓存")]),s._v(" "),n("p",[s._v("通过查询缓存是打开的，解析查询语句前会查询是否命中查询缓存中的结果，这个检查是通过一个对大小写敏感的哈希查找实现的。")]),s._v(" "),n("h3",{attrs:{id:"_6-4-3-查询优化处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-3-查询优化处理","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.4.3 查询优化处理")]),s._v(" "),n("ul",[n("li",[s._v("语法解析器和预处理")]),s._v(" "),n("li",[s._v("查询优化器")]),s._v(" "),n("li",[s._v("查询和索引的统计信息")]),s._v(" "),n("li",[s._v("执行关联查询（MySQL关联执行的策略：对任何关联都执行嵌套循环关联操作，即先在一个表中循环取出单条数据，然后再嵌套循环到下一个表中寻找匹配的行，依次下去，直到找到所有表中匹配的行为止。然后根据各个表匹配的行，返回查询中所需要的各个列。）")]),s._v(" "),n("li",[s._v("执行计划")]),s._v(" "),n("li",[s._v("...")])]),s._v(" "),n("h3",{attrs:{id:"_6-7-2-优化关联查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-2-优化关联查询","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.7.2 优化关联查询")]),s._v(" "),n("ul",[n("li",[s._v("确保在"),n("code",[s._v("ON")]),s._v("或者"),n("code",[s._v("USING")]),s._v("子句中的列由索引。一般来说，除非有其他理由，否则只需在关联顺序中的第二个表的相应列上创建索引")]),s._v(" "),n("li",[s._v("确保任何的"),n("code",[s._v("GROUP BY")]),s._v(" 和"),n("code",[s._v("ORDER BY")]),s._v("中的表达式只涉及到一个表中的列，这样MySQL才有可能使用索引来优化这个过程")])]),s._v(" "),n("h3",{attrs:{id:"_6-7-4-优化group-by-和order-by"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-4-优化group-by-和order-by","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.7.4 优化"),n("code",[s._v("GROUP BY")]),s._v(" 和"),n("code",[s._v("ORDER BY")])]),s._v(" "),n("p",[s._v("在MySQL中，当无法使用索引的时候，"),n("code",[s._v("GROUP BY")]),s._v("使用两种策略来完成：使用临时表或者文件（内存或者磁盘文件）来排序。")]),s._v(" "),n("p",[s._v("如果需要对关联查询做分组，并且是按照查找表中的某个列进行分组，那么通常采用查找表的标示列分组的效率会比其他列更高。如：")]),s._v(" "),n("div",{staticClass:"language-SQL line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{attrs:{class:"token comment"}},[s._v("# 效率不会很好")]),s._v("\n"),n("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" actor"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("first_name"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" actor"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("last_name "),n("span",{attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token operator"}},[s._v("*")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" film_actor\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" actor "),n("span",{attrs:{class:"token keyword"}},[s._v("USING")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("actor_id"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" actor"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("first_name"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" actor"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("last_name"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# 效率更高")]),s._v("\n"),n("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" actor"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("first_name"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" actor"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("last_name "),n("span",{attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token operator"}},[s._v("*")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" film_actor\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" actor "),n("span",{attrs:{class:"token keyword"}},[s._v("USING")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("actor_id"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" actor_id\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"_6-7-5-优化limit分页"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-5-优化limit分页","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.7.5 优化"),n("code",[s._v("LIMIT")]),s._v("分页")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("如果有对应的索引，使用"),n("code",[s._v("LIMIT")]),s._v("并且配合"),n("code",[s._v("GROUP BY")]),s._v("通常效率不会低。")])]),s._v(" "),n("li",[n("p",[s._v("优化偏移量非常大的分页查询最简单的办法就是尽量使用索引覆盖扫描，而不是查询所有的列。根据需要做一次关联操作再返回所需的列。对于偏移量很大的时候，这样做的效率会提升非常大。如下面的查询：")])])]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" film_id"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" description "),n("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" sakila"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film "),n("span",{attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" title "),n("span",{attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),n("span",{attrs:{class:"token number"}},[s._v("50000")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{attrs:{class:"token number"}},[s._v("5")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("如果表非常大，这个查询最好改写成下面的查询：")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" film"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" film"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description\n"),n("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" sakila"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("JOIN")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        "),n("span",{attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" film_id "),n("span",{attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" sakila"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film\n        "),n("span",{attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" title "),n("span",{attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),n("span",{attrs:{class:"token number"}},[s._v("50000")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{attrs:{class:"token number"}},[s._v("5")]),s._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" lim "),n("span",{attrs:{class:"token keyword"}},[s._v("USING")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("这里的“延迟关联”将大大提升查询效率，它让MySQL扫描尽可能少的页面，获取所需访问的记录后再根据关联列回原表查询所需的所有列。")]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[s._v("将LIMIT查询转换成已知位置的查询，让MySQL通过范围扫描获取得对应的结果。")]),s._v(" "),n("li",[s._v("其他优化办法还包括使用预先计算的汇总表，或者关联到一个冗余表，冗余表只包含主键列和需要做排序的数据列。")])])])}],e=t(0),_=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);_.options.__file="06.md";a.default=_.exports}}]);