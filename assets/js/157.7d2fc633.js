(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{352:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),n("p",[t._v('每个平台操作内存的方式都是差不多的有两个方面，一负责申请，二负责释放。如果应用程序向系统申请内存，系统便会在内存中寻找还没有被使用的地方，如果有合适的，便分配给这个程序，并标记下来，不再给其它的程序了。如果一个内存块没有释放，而所有者应用程序也永远不再使用它了。那么，我们就称其为"内存泄漏"，那么这部分内存就无法再为其它程序所用了。\n在一个典型的客户端应用程序中，偶尔的小量的内存泄漏是可以被操作系统容忍的，因为在进程结束后该泄漏内存会被返回给OS。这并没有什么高科技含量，因为OS知道它把该内存分配给了哪个程序，并且它能够在一个程序结束后把这些内存给回收回来。')]),t._v(" "),n("p",[t._v("但是，世界总是不缺乏特例！对于一些需要长时间运行的程序，比如像Apache这样的web服务器以及它的php模块来说，都是伴随着操作系统长时间运行的，所以OS在很长一段时间内不能主动的回收内存，从而导致这个程序的每一个内存泄漏都会促进量变到质变的进化，最终引起严重的内存泄漏错误，使系统的资源消耗殆尽。")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),n("p",[t._v('为了实现从用户端(PHP语言中)"跳出"，需要使用一种方法来完全"跳出"一个活动请求。这个功能是在内核中实现的：在一个请求的开始设置一个"跳出"地址，然后在任何die()或exit()调用或在遇到任何关键错误(E_ERROR)时执行一个longjmp()以跳转到该"跳出"地址。')]),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),n("p",[t._v('在上面的"跳出"请求期间解决内存泄漏的方案之一是：使用Zend内存管理(Zend Memory Manager,简称ZendMM、ZMM)层。内核的这一部分非常类似于操作系统的内存管理功能——分配内存给调用程序。区别在于，它处于进程空间中非常低的位置而且是"请求感知"的；这样一来，当一个请求结束时，它能够执行与OS在一个进程终止时相同的行为。也就是说，它会隐式地释放所有的为该请求所占用的内存。')]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),n("p",[t._v('有些时候，某次申请的内存需要在一个请求结束后仍然存活一段时间，也就是持续性存在于各个请求之间。这种类型的分配（因其在一次请求结束之后仍然存在而被称为"永久性分配"），可以使用传统型内存分配器来实现，因为这些分配并不会添加ZendMM使用的那些额外的相应于每种请求的信息。然而有时，我们必须在程序运行时根据某个数据的具体值或者状态才能确定是否需要进行永久性分配，因此ZendMM定义了一组帮助宏，其行为类似于其它的内存分配函数，但是使用最后一个额外参数来指示是否为永久性分配。')]),t._v(" "),n("p",[t._v("如果你确实想实现一个永久性分配，那么这个参数应该被设置为1；在这种情况下，请求是通过传统型malloc()分配器家族进行传递的。然而，如果运行时刻逻辑认为这个块不需要永久性分配；那么，这个参数可以被设置为零，并且调用将会被调整到针对每种请求的内存分配器函数。")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),n("p",[t._v("该函数能够分配len+1个字节的内存并且从ptr处复制len个字节到最新分配的块。这个estrndup()函数的行为可以大致描述如下：")]),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),n("p",[t._v('这些函数分配的内存空间最终大小都是((size*count)+addtl)。\n你可以会问："为什么还要提供额外函数呢？为什么不使用一个emalloc/pemalloc呢？"。\n原因很简单：为了安全，以防万一。尽管有时候可能性相当小，但是，正是这一"可能性相当小"的结果导致宿主平台的内存溢出。\n这可能会导致分配负数个数的字节空间，或更有甚者，会导致分配一个小于调用程序要求大小的字节空间。\n而safe_emalloc()能够避免这种类型的陷井-通过检查整数溢出并且在发生这样的溢出时显式地预以结束。')]),t._v(" "),t._m(21),t._v(" "),n("hr"),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),n("ul",[n("li",[t._v("3 "),n("router-link",{attrs:{to:"./3.html"}},[t._v("内存管理")])],1),t._v(" "),n("li",[t._v("3.2 "),n("router-link",{attrs:{to:"./3.2.html"}},[t._v("引用计数")])],1)])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"_3-1-内存管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-内存管理","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.1 内存管理")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在PHP里，我们可以定义字符串变量，比如"),n("code",[t._v('<?php $str="hello"; ?>')]),t._v("，"),n("code",[t._v("$str")]),t._v("这个字符串变量可以被自由的修改与复制等。这一切在C语言里看起来都是不可能的事情，我们用"),n("code",[t._v('#char *p = "hello";')]),t._v(" 来定义一个字符串，但它是常量，是不能被修改的，如果你用"),n("code",[t._v("p[1]='c';")]),t._v("来修改这个字符串会引发段错误(Gcc,c99)，为了修改C语言里的字符串常量，我们往往需要定义字符串数组。为了得到一个能够让我们自由修改的字符串，我们往往需要用"),n("code",[t._v("strdup")]),t._v("函数来复制一个字符串出来。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"hello world"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{attrs:{class:"token comment"}},[t._v("// p[0] = 'a'; 如果这么做，就等着运行时段错误吧。")]),t._v("\n\t"),n("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tstr "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("strdup")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tstr"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'a'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("//这时就能自由修改了。")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\t\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在PHP内核中，大多数情况下都不应该直接使用C语言中自带着"),n("code",[t._v("malloc")]),t._v("、"),n("code",[t._v("free")]),t._v("、"),n("code",[t._v("strdup")]),t._v("、"),n("code",[t._v("realloc")]),t._v("、"),n("code",[t._v("calloc")]),t._v("等操作内存的函数，而应使用内核提供的操作内存的函数，这样可以由内核整体统一的来管理内存。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"free-the-mallocs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#free-the-mallocs","aria-hidden":"true"}},[this._v("#")]),this._v(" Free the Mallocs")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在，我们来在C语言中故意错误的模拟一下PHP的"),s("code",[this._v("stristr()")]),this._v("函数为例，为了使用大小写不敏感的方式来搜索一个字符串，我们需要创建两个辅助的字符串，它们分别是被查找字符串和待查找字符串的小写化副本，然后由这两个副本来帮助我们来完成这次搜索。如果我们在执行这个函数后不释放这些副本占用的资源，那么每一次"),s("code",[this._v("stristr")]),this._v("函数都将是对内存的一次永远的侵占，最终导致这个函数占用了所有的系统内存，而没有实际意义！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("大多数人提出来的理想的解决方案是：书写优秀，整洁并且风格一致的代码，这当然是毫无疑问的。但是在PHP扩展开发这样的底层环境中，这并不能解决全部的问题。比如，你需要自己保证在层层嵌套调用中对某块内存的使用都是正确的，且会及时释放的。"),s("sup",[s("a",{attrs:{href:"#sup1"}},[this._v("1")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"错误处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#错误处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 错误处理")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("call_function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("fname"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fname_len TSRMLS_DC"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    zend_function "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("fe"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("lcase_fname"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/* php函数的名字是大小写不敏感的\n     * 我们可以在function tables里找到他们\n     * 保存的所有函数名都是小写的。\n     */")]),t._v("\n    lcase_fname "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("estrndup")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fname"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fname_len"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("zend_str_tolower")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lcase_fname"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fname_len"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("zend_hash_find")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("EG")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("function_table"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("lcase_fname"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fname_len "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("fe"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" SUCCESS"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("zend_execute")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fe"),n("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v("op_array TSRMLS_CC"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n        "),n("span",{attrs:{class:"token function"}},[t._v("php_error_docref")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" TSRMLS_CC"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" E_ERROR"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v('"Call to undefined function: %s()"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fname"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("efree")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lcase_fname"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("当"),n("code",[t._v("php_error_docref")]),t._v("这个函数被调用的时候，便会触发内核中的错误处理机制，根据错误级别来决定是否调用"),n("code",[t._v("longjmp")]),t._v("来终止当前请求并退出"),n("code",[t._v("call_function")]),t._v("函数，从而"),n("code",[t._v("efree")]),t._v("函数便永远不会被执行了。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),n("p",[t._v("其实"),n("code",[t._v("php_error_docref()")]),t._v("函数就相当于php语言里的"),n("code",[t._v("trigger_error()")]),t._v("函数.它的第一个参数是一个将被添加到"),n("code",[t._v("docref")]),t._v("的可选的文档引用，第三个参数可以是任何我们熟悉的"),n("code",[t._v("E_*")]),t._v("家族常量，用于指示错误的严重程度。后面的两个参数就像"),n("code",[t._v("printf()")]),t._v("风格的格式化和变量参数列表式样。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"zend内存管理器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zend内存管理器","aria-hidden":"true"}},[this._v("#")]),this._v(" Zend内存管理器")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("除了提供隐式的内存清除功能之外，ZendMM还能够根据php.ini中memory_limit设置来控制每一次内存请求行为，如果一个脚本试图请求比系统中可用内存更多的内存，或大于它每次应该请求的最大量，那么，ZendMM将自动地发出一个E_ERROR消息并且启动相应的终止进程。这种方法的一个额外优点在于，"),s("strong",[this._v("大多数内存分配调用的返回值并不需要检查，因为如果失败的话将会导致立即跳转到引擎的退出部分")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v('把PHP内核代码和OS的实际的内存管理层"钩"在一起的原理并不复杂：'),s("strong",[this._v("所有内部分配的内存都要使用一组特定的可选函数实现。例如，PHP内核代码不是使用"),s("code",[this._v("malloc(16)")]),this._v("来分配一个16字节内存块而是使用了"),s("code",[this._v("emalloc(16)")]),this._v('。除了实现实际的内存分配任务外，ZendMM还会使用相应的绑定请求类型来标志该内存块；这样以来，当一个请求"跳出"时，ZendMM可以隐式地释放它。')])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("例如，"),n("code",[t._v("pemalloc(buffer_len，1)")]),t._v("将映射到"),n("code",[t._v("malloc(buffer_len)")]),t._v("，而"),n("code",[t._v("pemalloc(buffer_len，0)")]),t._v("将被使用下列语句映射到"),n("code",[t._v("emalloc(buffer_len)")]),t._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("//define in Zend/zend_alloc.h:")]),t._v("\n"),n("span",{attrs:{class:"token macro property"}},[t._v("#"),n("span",{attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" pemalloc(size, persistent)\t((persistent)?malloc(size): emalloc(size))\t")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("所有这些在ZendMM中提供的内存管理函数都能够从下表中找到其在C语言中的函数。\n"),n("table",{staticClass:"table-common"},[n("tr",[n("td",[t._v("C语言原生函数")]),t._v(" "),n("td",[t._v("PHP内核封装后的函数")])]),t._v(" "),n("tr",[n("td",[t._v("void *malloc(size_t count);")]),t._v(" "),n("td",[t._v("void *emalloc(size_t count);"),n("br"),t._v("void *pemalloc(size_t count, char persistent);")])]),t._v(" "),n("tr",[n("td",[t._v("void *calloc(size_t count);")]),t._v(" "),n("td",[t._v("void *ecalloc(size_t count);"),n("br"),t._v("void *pecalloc(size_t count, char persistent);")])]),t._v(" "),n("tr",[n("td",[t._v("void *realloc(void *ptr, size_t count);")]),t._v(" "),n("td",[t._v("void *erealloc(void *ptr, size_t count);"),n("br"),t._v("void *perealloc(void *ptr, size_t count, char persistent);")])]),t._v(" "),n("tr",[n("td",[t._v("void *strdup(void *ptr);")]),t._v(" "),n("td",[t._v("void *estrdup(void *ptr);"),n("br"),t._v("void *pestrdup(void *ptr, char persistent);")])]),t._v(" "),n("tr",[n("td",[t._v("void free(void *ptr);")]),t._v(" "),n("td",[t._v("void efree(void *ptr);"),n("br"),t._v("void pefree(void *ptr, char persistent);")])])]),t._v("\n你可能会注意到，即使是"),n("code",[t._v("pefree()")]),t._v("函数也要求使用永久性标志。这是因为在调用"),n("code",[t._v("pefree()")]),t._v("时，它实际上并不知道是否ptr是一种永久性分配。需要注意的是，如果针对一个ZendMM申请的非永久性内存直接调用"),n("code",[t._v("free()")]),t._v("能够导致双倍的空间释放，而针对一种永久性分配调用"),n("code",[t._v("efree()")]),t._v("有可能会导致一个段错误，因为ZendMM需要去查找并不存在的管理信息。因此，你的代码需要记住它申请的内存是否是永久性的，从而选择不同的内存函数，"),n("code",[t._v("free()")]),t._v("或者"),n("code",[t._v("efree()")]),t._v("。\n除了上述内存管理函数外，还存在其它一些非常方便的ZendMM函数，例如：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token function"}},[t._v("estrndup")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr，"),n("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\n\t\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("ZEND_API "),n("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token function"}},[t._v("_estrndup")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uint length ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tp "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("_emalloc")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),n("span",{attrs:{class:"token operator"}},[t._v("+")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("UNEXPECTED")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" p"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{attrs:{class:"token function"}},[t._v("memcpy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tp"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" p"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在此，被隐式放置在缓冲区最后的0可以确保任何使用"),s("code",[this._v("estrndup()")]),this._v("实现字符串复制操作的函数都不需要担心会把结果缓冲区传递给一个例如"),s("code",[this._v("printf()")]),this._v("这样的希望以为NULL为结束符的函数。当使用"),s("code",[this._v("estrndup()")]),this._v("来复制非字符串数据时，最后一个字节实质上浪费了，但其中的利明显大于弊。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token function"}},[t._v("safe_emalloc")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size_t size"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t count"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t addtl"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token function"}},[t._v("safe_pemalloc")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size_t size"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t count"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t addtl"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" persistent"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("注意，并不是所有的内存分配例程都有一个相应的p*对等实现。例如，不存在pestrndup()，并且在PHP 5.1版本前也不存在safe_pemalloc()。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("dl",[s("dt",[this._v("贡献者名单")]),this._v(" "),s("dd",{attrs:{id:"sup1"}},[this._v("绊大象的蚂蚁{eaglevean#163.com}，注1")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"links"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#links","aria-hidden":"true"}},[this._v("#")]),this._v(" links")])}],!1,null,null,null);e.options.__file="3.1.md";s.default=e.exports}}]);