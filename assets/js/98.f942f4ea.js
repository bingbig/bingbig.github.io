(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{440:function(t,e,r){"use strict";r.r(e);var s=r(0),l=Object(s.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),r("ul",[r("li",[r("router-link",{attrs:{to:"./11.1.html"}},[t._v("1. 生成对象的实例与调用方法")])],1),t._v(" "),r("li",[r("router-link",{attrs:{to:"./11.2.html"}},[t._v("2. 读写对象的属性")])],1),t._v(" "),r("li",[r("router-link",{attrs:{to:"./11.3.html"}},[t._v("3. 小结")])],1)]),t._v(" "),r("p",[t._v("上一章里，我们看了一下如何在PHP扩展里定义类与接口，那这一章里我们将入手学习一下如何在PHP扩展中操作类的实例————对象。\nPHP语言中的面向对象其实是分为三个部分来实现的，class、object、refrence。class就是我们所说的类，可以直观的理解为前面章节中所描述的zend_class_entry。object就是实际的对象。每一个zval并不直接包含具体的object，而是通过一个索引--refrence与其联系。也就是说，每个class都有很多个object实例，并把他们统一的放在一个数组里，每个zval只要记住自己相应的key就行了。如此一来，我们在传递zval时候，实际上传递的是一个索引，而不是内存中具体的对象数据。")]),t._v(" "),t._m(1),t._v(" "),r("ul",[r("li",[t._v("10.5 "),r("router-link",{attrs:{to:"./10.5.html"}},[t._v("小结")])],1),t._v(" "),r("li",[t._v("11.1 "),r("router-link",{attrs:{to:"./11.1.html"}},[t._v("生成对象的实例")])],1)])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"_11-php中的面向对象（二）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-php中的面向对象（二）","aria-hidden":"true"}},[this._v("#")]),this._v(" 11 PHP中的面向对象（二）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"links"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#links","aria-hidden":"true"}},[this._v("#")]),this._v(" links")])}],!1,null,null,null);l.options.__file="11.md";e.default=l.exports}}]);