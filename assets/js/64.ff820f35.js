(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{456:function(t,a,e){"use strict";e.r(a);var s=e(0),i=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"僵尸进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#僵尸进程","aria-hidden":"true"}},[t._v("#")]),t._v(" 僵尸进程")]),t._v(" "),e("h2",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),e("p",[t._v("在unix/linux中，正常情况下，子进程是通过父进程创建的，子进程在创建新的进程。子进程的结束和父进程的运行是一个异步过程,即父进程永远无法预测子进程 到底什么时候结束。 当一个 进程完成它的工作终止之后，它的父进程需要调用wait()或者waitpid()系统调用取得子进程的终止状态。\n　　孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由 "),e("code",[t._v("init")]),t._v(" 进程对它们完成状态收集工作。\n　　僵尸进程：一个进程使用 "),e("code",[t._v("fork")]),t._v(" 创建子进程，如果子进程退出，而父进程并没有调用 "),e("code",[t._v("wait")]),t._v(" 或 "),e("code",[t._v("waitpid")]),t._v(" 获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。")]),t._v(" "),e("h2",{attrs:{id:"问题及危害"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题及危害","aria-hidden":"true"}},[t._v("#")]),t._v(" 问题及危害")]),t._v(" "),e("p",[t._v("unix提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息， 就可以得到。这种机制就是: "),e("strong",[t._v("在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。 但是仍然为其保留一定的信息(包括进程号the process ID,退出状态the termination status of the process,运行时间the amount of CPU time taken by the process等)。直到父进程通过wait / waitpid来取时才释放")]),t._v("。 但这样就导致了问题，如果进程不调用 "),e("code",[t._v("wait")]),t._v(" / "),e("code",[t._v("waitpid")]),t._v(" 的话， 那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。\n　　孤儿进程是没有父进程的进程，孤儿进程这个重任就落到了 "),e("code",[t._v("init")]),t._v(" 进程身上，"),e("code",[t._v("init")]),t._v(" 进程就好像是一个民政局，专门负责处理孤儿进程的善后工作。每当出现一个孤儿进程的时候，内核就把孤儿进程的父进程设置为 "),e("code",[t._v("init")]),t._v("，而 "),e("code",[t._v("init")]),t._v(" 进程会循环地 "),e("code",[t._v("wait()")]),t._v(" 它的已经退出的子进程。这样，当一个孤儿进程凄凉地结束了其生命周期的时候，"),e("code",[t._v("init")]),t._v(" 进程就会代表党和政府出面处理它的一切善后工作。因此孤儿进程并不会有什么危害。\n　　任何一个子进程( "),e("code",[t._v("init")]),t._v(" 除外)在 "),e("code",[t._v("exit()")]),t._v(" 之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。这是每个子进程在结束时都要经过的阶段。如果子进程在 "),e("code",[t._v("exit()")]),t._v(" 之后，父进程没有来得及处理，这时用"),e("code",[t._v("ps")]),t._v("命令就能看到子进程的状态是“Z”。如果父进程能及时处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。如果父进程在子进程结束之前退出，则子进程将由"),e("code",[t._v("init")]),t._v("接管。"),e("code",[t._v("init")]),t._v("将会以父进程的身份对僵尸状态的子进程进行处理。")]),t._v(" "),e("h2",{attrs:{id:"删除僵尸进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除僵尸进程","aria-hidden":"true"}},[t._v("#")]),t._v(" 删除僵尸进程")]),t._v(" "),e("p",[t._v("查看进程号")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{attrs:{class:"token function"}},[t._v("ps")]),t._v(" -A -o stat,ppid,pid,cmd "),e("span",{attrs:{class:"token operator"}},[t._v("|")]),e("span",{attrs:{class:"token function"}},[t._v("grep")]),t._v(" -e '^"),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Zz"),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("’\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("杀死僵尸进程：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{attrs:{class:"token function"}},[t._v("kill")]),t._v(" -HUP 进程号\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])])}],!1,null,null,null);i.options.__file="zombie_process.md";a.default=i.exports}}]);