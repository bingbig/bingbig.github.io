(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{460:function(t,e,i){"use strict";i.r(e);var s=i(0),r=Object(s.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[t._m(0),t._v(" "),i("p",[t._v("一个PHP实例，无论通过http请求调用的，还是从命令行启动的，都会向我们上一节说的那样，\n依次进行Module init、Request init、Request Shutdown、Module shutdown四个过程，\n当然之间还会执行脚本自己的逻辑。\n那么两种init和两种shutdown各会执行多少次、各自的执行频率有多少呢？\n这取决于PHP是用什么sapi与宿主通信的。最常见的四种方式如下所列：")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),i("p",[t._v("CLI和CGI的SAPI是相当特殊的，因为这时PHP的生命周期完全在一个单独的请求中完成。虽然简单，不过我们以前提过的两种init和两种shutdown仍然都会被执行。图1.1展示了PHP在这种模式下是怎么工作的。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),i("p",[t._v("因为是fork出来的，所以各个进程间的数据是彼此独立，不会受到外界的干扰**(ps：fork后可以用管道等方式实现进程间通信)**。\n这是一片独立天地，它允许每个子进程做任何事情，玩七十码、躲猫猫都没人管，办公室拿砍刀玩自杀也没事，\n下图展示了从apache的视角来看多进程工作模式下的PHP：")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),i("p",[t._v("随着时代的进步，PHP越来越多的在多线程模式下工作，就像IIS的isapi和Apache MPM worker**(支持混合的多线程多进程的多路处理模块)**。\n在这种模式下，只有一个服务器进程在运行着，但会同时运行很多线程，这样可以减少一些资源开销，\n像Module init和Module shutdown就只需要运行一次就行了，一些全局变量也只需要初始化一次，\n因为线程独具的特质，使得各个请求之间方便的共享一些数据成为可能。")]),t._v(" "),t._m(9),t._v(" "),i("p",[t._v("下图展示了在这种模式下PHP的工作流程：\n")]),t._m(10),i("p"),t._v(" "),t._m(11),t._v(" "),i("p",[t._v("Embed SAPI是一种比较特殊的sapi，容许你在C/C++语言中调用PHP/ZE提供的函数。\n并且这种sapi和上面的三种一样，按Module Init、Request Init、Rshutdown、mshutdown的流程执行着。\n当然，这只是其中一种情况。因为特定的应用有自己特殊的需求，只是在处理PHP脚本这个环节基本一致。")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"http://www.laruence.com/2008/09/23/539.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Laruence大哥的使用PHP Embed SAPI实现Opcodes查看器"),i("OutboundLink")],1)])]),t._v(" "),t._m(14),t._v(" "),i("ul",[i("li",[i("router-link",{attrs:{to:"./preface.html"}},[t._v("目录")])],1),t._v(" "),i("li",[t._v("上一节 "),i("router-link",{attrs:{to:"./1.2.html"}},[t._v("PHP的启动与终止")])],1),t._v(" "),i("li",[t._v("下一节 "),i("router-link",{attrs:{to:"./1.4.html"}},[t._v("线程安全")])],1)])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"_1-3-php的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-php的生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.3 PHP的生命周期")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("直接以CLI/CGI模式调用")]),this._v(" "),e("li",[this._v("多进程模式")]),this._v(" "),e("li",[this._v("多线程模式")]),this._v(" "),e("li",[this._v("Embedded(嵌入式，在自己的C程序中调用Zend Engine)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_1、cli-cgi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、cli-cgi","aria-hidden":"true"}},[this._v("#")]),this._v(" 1、CLI/CGI")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"http://www.walu.cc/phpbook/image/01fig01.jpg"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_2、多进程模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、多进程模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 2、多进程模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("[ps:书是2006年出版的，所以你应该理解作者说多进程是主流]")]),this._v("\nPHP最常见的工作方式便是编译成为Apache2 的Pre-fork MPM或者Apache1 的APXS 模式，其它web服务器也大多用相同的方式工作，在本书后面，把这种方式统一叫做多进程方式。\n给它起这个名字是有原因的，不是随便拍拍屁股拍拍脑袋定下来的。\n当Apache启动的时候，会立即把自己fork出好几个子进程，每一个进程都有自己独立的内存空间，\n也就代表了有自己独立的变量、函数等。在每个进程里的PHP的工作方式如下图所示：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"http://www.walu.cc/phpbook/image/01fig02.jpg"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"http://www.walu.cc/phpbook/image/01fig03.jpg"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_3、多线程模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、多线程模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 3、多线程模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("其实多线程与MINIT、MSHUTDOWN只执行一次并没有什么联系，多进程模式下一样可以实现。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"http://www.walu.cc/phpbook/image/01fig04.jpg"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_4、embed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、embed","aria-hidden":"true"}},[this._v("#")]),this._v(" 4、Embed")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("真正令emebed模式独特的是因为它可能随时嵌入到某个程序里面去("),e("strong",[this._v("比如你的test.exe里")]),this._v(")，\n然后被当作脚本的一部分在一个请求的时候执行。\n控制权在PHP和原程序间来回传递。关于嵌入式的PHP在第20章会有应用，到时我们再用实例介绍这个不经常使用的sapi。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"关于embed-sapi应用的文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于embed-sapi应用的文章","aria-hidden":"true"}},[this._v("#")]),this._v(" 关于Embed SAPI应用的文章")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"links"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#links","aria-hidden":"true"}},[this._v("#")]),this._v(" links")])}],!1,null,null,null);r.options.__file="1.3.md";e.default=r.exports}}]);