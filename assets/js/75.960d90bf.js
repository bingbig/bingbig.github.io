(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{475:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"里氏替换原则lsp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则lsp","aria-hidden":"true"}},[s._v("#")]),s._v(" 里氏替换原则LSP")]),s._v(" "),a("h2",{attrs:{id:"一、原理介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、原理介绍","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、原理介绍")]),s._v(" "),a("p",[s._v("所有引用基类的地方必须能透明地使用其子类的对象。也就是说，只有满足以下2个条件的OO设计才可被认为是满足了LSP原则：")]),s._v(" "),a("blockquote",[a("p",[s._v("不应该在代码中出现if/else之类对子类类型进行判断的条件。")])]),s._v(" "),a("p",[s._v("以下代码就违反LSP定义。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj typeof Class1"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{attrs:{class:"token keyword"}},[s._v("do")]),s._v(" something\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj typeof Class2"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{attrs:{class:"token keyword"}},[s._v("do")]),s._v(" something "),a("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("p",[s._v("子类应当可以替换父类并出现在父类能够出现的任何地方，或者说如果我们把代码中使用基类的地方用它的子类所代替，代码还能正常工作")])]),s._v(" "),a("p",[s._v("里氏替换原则LSP是使代码符合开闭原则的一个重要保证。同时LSP体现了：\n1） "),a("strong",[s._v("类的继承原则：")]),s._v(" 如果一个继承类的对象可能会在基类出现地方出现运行错误，则该子类不应该从该基类继承，或者说，应该重新设计它们之间的关系。\n2）"),a("strong",[s._v("动作正确性保证：")]),s._v(" 从另一个侧面上保证了符合LSP设计原则的类的扩展不会给已有的系统引入新的错误。")])])}],!1,null,null,null);e.options.__file="LSP.md";t.default=e.exports}}]);