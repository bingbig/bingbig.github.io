(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{268:function(e,t,r){"use strict";r.r(t);var a=r(0),o=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"docker-run网络模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-run网络模式","aria-hidden":"true"}},[e._v("#")]),e._v(" docker run网络模式")]),e._v(" "),r("p",[e._v("我们在使用docker run创建Docker容器时，可以用--net选项指定容器的网络模式，Docker有以下4种网络模式：")]),e._v(" "),r("ul",[r("li",[e._v("host模式，使用--net=host指定。")]),e._v(" "),r("li",[e._v("container模式，使用--net=container:NAME_or_ID指定。")]),e._v(" "),r("li",[e._v("none模式，使用--net=none指定。")]),e._v(" "),r("li",[e._v("bridge模式，使用--net=bridge指定，默认设置。")])]),e._v(" "),r("p",[e._v("下面分别介绍一下Docker的各个网络模式。")]),e._v(" "),r("h2",{attrs:{id:"_1-host模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-host模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. host模式")]),e._v(" "),r("p",[e._v("众所周知，Docker使用了Linux的Namespaces技术来进行资源隔离，如PID Namespace隔离进程，Mount Namespace隔离文件系统，Network Namespace隔离网络等。一个Network Namespace提供了一份独立的网络环境，包括网卡、路由、Iptable规则等都与其他的Network Namespace隔离。一个Docker容器一般会分配一个独立的Network Namespace。但如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。")]),e._v(" "),r("p",[e._v("例如，我们在10.10.101.105/24的机器上用host模式启动一个含有web应用的Docker容器，监听tcp80端口。当我们在容器中执行任何类似ifconfig命令查看网络环境时，看到的都是宿主机上的信息。而外界访问容器中的应用，则直接使用10.10.101.105:80即可，不用任何NAT转换，就如直接跑在宿主机中一样。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。")]),e._v(" "),r("h2",{attrs:{id:"_2-container模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-container模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. container模式")]),e._v(" "),r("p",[e._v("在理解了host模式后，这个模式也就好理解了。这个模式指定新创建的容器和已经存在的一个容器共享一个Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。")]),e._v(" "),r("h2",{attrs:{id:"_3-none模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-none模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 3. none模式")]),e._v(" "),r("p",[e._v("这个模式和前两个不同。在这种模式下，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。")]),e._v(" "),r("h2",{attrs:{id:"_4-bridge模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-bridge模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 4. bridge模式")]),e._v(" "),r("p",[e._v("bridge模式是Docker默认的网络设置，此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上。")])])}],!1,null,null,null);o.options.__file="network.md";t.default=o.exports}}]);