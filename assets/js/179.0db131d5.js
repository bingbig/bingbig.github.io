(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{311:function(t,e,s){"use strict";s.r(e);var a=s(0),r=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("现在我们已经可以编写一个更真实的函数了，既可以接收用户传递过来的参数，也可以返回数据给调用者。为了写出高质量的代码，还需要我们多花点心思在zval的写时复制等特殊机制上，否则便会在接收参数和返回数据时留下一些bug。\n下面的章节里，让我们去看一下PHP语言里强大的数组类型是如何在内核中实现的，去探究内核中的HashTable结构，从而能编写出更强大的PHP扩展。")]),t._v(" "),t._m(1),t._v(" "),s("ul",[s("li",[t._v("7.2 "),s("router-link",{attrs:{to:"./7.2.html"}},[t._v("Arg Info 与类型绑定")])],1),t._v(" "),s("li",[t._v("8 "),s("router-link",{attrs:{to:"./8.html"}},[t._v("使用HashTable与{数组}")])],1)])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"_7-3-函数的参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-函数的参数","aria-hidden":"true"}},[this._v("#")]),this._v(" 7.3 函数的参数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"links"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#links","aria-hidden":"true"}},[this._v("#")]),this._v(" links")])}],!1,null,null,null);r.options.__file="7.3.md";e.default=r.exports}}]);