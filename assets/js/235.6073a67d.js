(window.webpackJsonp=window.webpackJsonp||[]).push([[235],{322:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("p",[t._v("推荐这篇文章: "),n("a",{attrs:{href:"https://www.jianshu.com/p/0944c16b2353",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 是如何处理命令的（客户端）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("本文我们追踪一下，一行命令是如何从Redis客户端发送到服务端，并且服务端将执行结果返回给客户端的。以客户端的命令行交互模式为例。")]),t._v(" "),n("p",[t._v("Redis客户端的命令行交互模式基于"),n("a",{attrs:{href:"https://github.com/antirez/linenoise",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("linenoise")]),n("OutboundLink")],1),t._v("行编辑库开发的，和redis是同一个作者。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"redis客户端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis客户端","aria-hidden":"true"}},[this._v("#")]),this._v(" Redis客户端")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在"),n("code",[t._v("redis-cli.c")]),t._v("文件中我们找到客户端程序的"),n("code",[t._v("main()")]),t._v("入口函数。函数的开始直接初始化"),n("code",[t._v("config")]),t._v("配置结构。"),n("code",[t._v("config")]),t._v("是一个结构体类型的全局变量，其成员包含了客户端所需的各种配置参数。在主函数的最后，我们可以找到进入交互模式的方法"),n("code",[t._v("repl()")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* Start interactive mode when no command is provided */")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eval"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/* Ignore SIGPIPE in interactive mode to force a reconnect */")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("signal")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SIGPIPE"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SIG_IGN"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/* Note that in repl mode we don't abort on connection error.\n        * A new attempt will be performed for every command send. */")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("cliConnect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("repl")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当类型为"),s("code",[this._v("SOCK_STREAM")]),this._v("的套接字不再连接时，进程写该套接字会产生"),s("code",[this._v("SIGPIPE")]),this._v("信号。"),s("code",[this._v("signal(SIGPIPE, SIG_IGN);")]),this._v("只是简单的忽略这个信号，以免客户端因为和服务端失去连接而中断。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"初始化和连接服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化和连接服务器","aria-hidden":"true"}},[this._v("#")]),this._v(" 初始化和连接服务器")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("cliConnect()")]),t._v("函数会根据配置"),n("code",[t._v("config")]),t._v("尝试通过TCP或者unix socket连接服务器，连接成功后为已连接的套接字设置"),n("code",[t._v("SO_KEEPALIVE")]),t._v("选项来检测服务端是否停止服务，也可以避免耗时长的任务因为超时而中断。如果redis设置了鉴权，客户端连接函数还会向服务端发送一条命令来验证用户是否合法。另外"),n("code",[t._v("cliConnect()")]),t._v("函数调用"),n("code",[t._v("redisConnect()")]),t._v("连接成功后会返回初始化的redis客户端的上下文描述结构体"),n("code",[t._v("context")]),t._v("，结构体的类型名为"),n("code",[t._v("redisContext")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"auth命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auth命令","aria-hidden":"true"}},[this._v("#")]),this._v(" auth命令")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* Send AUTH command to the server */")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("cliAuth")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    redisReply "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("reply"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("auth "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" REDIS_OK"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    reply "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("redisCommand")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v('"AUTH %s"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("auth"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reply "),n("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("freeReplyObject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reply"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" REDIS_OK"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" REDIS_ERR"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("发送命令函数"),n("code",[t._v("redisCommand()")]),t._v("接受三个参数："),n("code",[t._v("context")]),t._v(", auth命令格式字符串以及客户端配置中保存的auth信息（也是字符串）。下面列了"),n("code",[t._v("redisCommand()")]),t._v("函数调用其他函数的顺序，这条auth命令字符串经过了格式化之后被追加到"),n("code",[t._v("c->obuf")]),t._v("字符串的后面。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("redisCommand\n    redisvCommand\n        redisvAppendCommand\n            redisvFormatCommand\n            __redisAppendCommand\n                sdscatlen    \n        __redisBlockForReply\n            redisGetReply\n                redisGetReplyFromReader\n                    redisReaderGetReply\n                redisBufferWrite\n                redisBufferRead\n                redisGetReplyFromReader\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("c->obuf")]),t._v("这个字符串是redis客户端程序的全局变量"),n("code",[t._v("context")]),t._v("的成员"),n("code",[t._v("obuf")]),t._v("，它被用作命令缓冲区。"),n("code",[t._v("__redisBlockForReply()")]),t._v("会根据"),n("code",[t._v("c->flags & REDIS_BLOCK")]),t._v("来判断是否阻塞执行redis命令：如果是非阻塞的话，多条命令将缓冲到缓冲区"),n("code",[t._v("obuf")]),t._v("中，待合适的时机一次性发送给客户端执行。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("上面提到过，在调用"),n("code",[t._v("redisConnect()")]),t._v(" 初始化了"),n("code",[t._v("context")]),t._v("全局变量。初始化时它执行了"),n("code",[t._v("c->flags |= REDIS_BLOCK;")]),t._v("，使得一开始redis客户端执行命令是阻塞型的。于是，"),n("code",[t._v("__redisBlockForReply()")]),t._v("就会立即执行"),n("code",[t._v("redisGetReply()")]),t._v("来发送("),n("code",[t._v("redisBufferWrite()")]),t._v(")缓冲区中的命令并且读取("),n("code",[t._v("redisBufferRead()")]),t._v(", "),n("code",[t._v("redisGetReplyFromReader()")]),t._v(")来自服务端的返回数据。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("关于redis客户端和服务端之间的通信协议"),s("code",[this._v("RESP")]),this._v("，网上已经有很多的介绍了，这里就不加以赘述了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"选择数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选择数据库","aria-hidden":"true"}},[this._v("#")]),this._v(" 选择数据库")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在执行完auth命令，用户提供的密码正确时，连接函数最后还执行了"),s("code",[this._v("cliSelect()")]),this._v("命令向服务器发送了"),s("code",[this._v("SELECT")]),this._v(" 命令选择数据库，告诉服务器客户端期望读取的数据库是哪个，同理，发送命令的方法如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("reply "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("redisCommand")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v('"SELECT %d"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dbnum"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"进入不同的客户端模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进入不同的客户端模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 进入不同的客户端模式")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("连接成功后，客户端将进入我们想要的环境，如命令行交互模式。执行"),s("code",[this._v("repl()")]),this._v("函数。"),s("code",[this._v("repl()")]),this._v("函数是一个大循环，读取终端输入的命令，格式化后通过RESP协议发送给服务端进程，服务端处理后将结果返回给客户端，客户端接收到后显示在终端。")])}],!1,null,null,null);e.options.__file="client.md";s.default=e.exports}}]);