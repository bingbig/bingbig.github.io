(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{251:function(s,n,a){"use strict";a.r(n);var t=a(0),e=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"linux-命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-命名空间","aria-hidden":"true"}},[s._v("#")]),s._v(" Linux 命名空间")]),s._v(" "),a("p",[a("code",[s._v("Linux Namespace")]),s._v(" 是Linux提供的一种内核级别环境隔离的方法，当前非常流行的容器就是基于此实现的。Linux 命名空间可以在不同的独立进程之间隔离系统资源。比如说，PID命名空间隔离了进程ID号区间。这就意味着，在同一个宿主机上，可以有两个拥有相同进程ID的进程。")]),s._v(" "),a("p",[s._v("什么是容器呢？一个Linux容器是一个或者多个进程的集合，这个集合和系统的其他部分相隔离。")]),s._v(" "),a("p",[s._v("显然命名空间水平的隔离对于容器来说是非常有用的。没有命名空间，A容器中的进程可以卸载B容器中非常重要的文件系统，或者修改C容器中的hostanme。通过命名空间对些系统资源的进行隔离，A容器中的进程就无法知道B、C容器中的进程的存在了。")]),s._v(" "),a("p",[s._v("我们直接用一个命名空间的例子来实战一下。")]),s._v(" "),a("blockquote",[a("p",[s._v("我们在一台 "),a("code",[s._v("centOS 7.7")]),s._v("的机器上测试")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("root@HiBing➜~ unshare -h\n\n用法：\n unshare "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("program"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("argument"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\nRun a program with some namespaces unshared from the parent.\n\n选项：\n -m, --mount               unshare mounts namespace\n -u, --uts                 unshare UTS namespace "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hostname etc"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n -i, --ipc                 unshare System V IPC namespace\n -n, --net                 unshare network namespace\n -p, --pid                 unshare pid namespace\n -U, --user                unshare user namespace\n -f, --fork                fork before launching "),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("program"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v("\n     --mount-proc"),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{attrs:{class:"token operator"}},[s._v("=")]),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("dir"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{attrs:{class:"token function"}},[s._v("mount")]),s._v(" proc filesystem first "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("implies --mount"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n -r, --map-root-user       map current user to root "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("implies --user"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     --propagation "),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("slave"),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v("shared"),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v("private"),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v("unchanged"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v("\n                           modify "),a("span",{attrs:{class:"token function"}},[s._v("mount")]),s._v(" propagation "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("mount")]),s._v(" namespace\n -s, --setgroups allow"),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v("deny  control the setgroups syscall "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" user namespaces\n\n -h, --help     显示此帮助并退出\n -V, --version  输出版本信息并退出\n\n更多信息请参阅 unshare"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("1"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("。\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[a("code",[s._v("unshare")]),s._v(" 命令可以在不同于父进程进程空间中执行新的程序。也就是说，"),a("code",[s._v("unshare")]),s._v(" 会在不同的命名空间集合中执行你传入的任何程序。")]),s._v(" "),a("p",[s._v("我们先试试"),a("code",[s._v("UTS(UNIX Time Sharing)命名空间")]),s._v("（UTS命名空间主要是隔离主机名）。我们可以在不同的UTS命名空间进程中执行"),a("code",[s._v("hostname my-new-hostname")]),s._v("来修改主机名，验证会不会影响外面的进程。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 切换成root身份\nroot@HiBing➜~ hostname                 # 查看当前主机名\nHiBing\nroot@HiBing➜~ unshare -u /bin/sh       # 在新的UTS命名空间中创建一个shell\nsh-4.2# hostname my-new-hostname       # 设置新的主机名\nsh-4.2# hostname                       # 确认新的主机名\nmy-new-hostname\nsh-4.2# exit                           # 退出新的UTS命名空间\nexit\nroot@HiBing➜~ hostname                 # 确认原来的主机名没有变化\nHiBing\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("一步步分析，一开始我们就切换成为root用户。大多数命名空间都需要root权限（除了用户命名空间）。接着我们执行"),a("code",[s._v("hostname")]),s._v("来确认当前的主机名。")]),s._v(" "),a("p",[s._v("关键的一步来了。 "),a("code",[s._v("unshare -u /bin/sh")]),s._v(" 命名使得进程陷入的一个新的，隔离的UTS命名空间。 之后执行 "),a("code",[s._v("hostname my-new-hostname")]),s._v("来设置新的UTS空间中的主机名，并通过 "),a("code",[s._v("hostname")]),s._v("确认修改成功。")]),s._v(" "),a("p",[s._v("最后我们"),a("code",[s._v("exit")]),s._v(" 这个命名空间中的shell，然后执行"),a("code",[s._v("hostname")]),s._v("再确认一次。我们可以看到主机名没有变化，尽管我们执行了 "),a("code",[s._v("hostname my-new-hostname")]),s._v("。这是因为这只在新的 UTS 命名空间中才会生效。")]),s._v(" "),a("p",[a("strong",[s._v("命名空间和CGroups")])]),s._v(" "),a("p",[s._v("LXC（Linux Container）所实现的隔离性主要是来自kernel的namespace, 其中pid, net, ipc, mnt, uts 等namespace将container的进程, 网络, 消息, 文件系统和hostname 隔离开。")]),s._v(" "),a("ol",[a("li",[s._v("Mount 隔离系统文件挂载点")]),s._v(" "),a("li",[s._v("UTS 隔离主机名和域名")]),s._v(" "),a("li",[s._v("IPC 隔离进程间通讯(IPC)资源")]),s._v(" "),a("li",[s._v("PID 隔离PID号区间")]),s._v(" "),a("li",[s._v("Network 隔离网络接口")]),s._v(" "),a("li",[s._v("User 隔离UID/GID号空间")])]),s._v(" "),a("p",[s._v("Cgroup（Control Groups）属于Linux内核提供的一个特性，用于限制和隔离一组进程对系统资源的使用，也就是左资源QoS，这些资源主要是包括CPU，内存，block I/O和网络带宽。")]),s._v(" "),a("p",[s._v("大多数的容器实现都用到了上面所提的命名空间来提供高层次的容器间进程的隔离并使用了cgroup的限额功能。")]),s._v(" "),a("h2",{attrs:{id:"接下来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接下来","aria-hidden":"true"}},[s._v("#")]),s._v(" 接下来")]),s._v(" "),a("p",[a("code",[s._v("unshare")]),s._v(" 命名很赞，但是我们如何才能更好的控制进程的命名空间呢？这个问题的答案还在后面。")])])}],!1,null,null,null);e.options.__file="linux_namespaces.md";n.default=e.exports}}]);